# name: Automerge


# on:
#   push:
#    branches:
#      - main
#   schedule:
#     # You can setup schedule here
#     - cron: '30 2 * * *'

# permissions:
#   contents: write

# env:
#   # replace "github_username" with your GitHub username
#   # replace "github.com/username/repo.git" with your GitHub repo path
#   # do NOT replace ${{secrets.GITHUB_TOKEN}}, GitHub will take care of it
#   MY_REPO: https://akhilesh-kabade-infoblox:${{secrets.GITHUB_TOKEN}}@github.com/akhilesh-kabade-infoblox/automerge-test.git

#   # replace "long-lived_branch_name" with your branch name
#   MY_BRANCH: feature-develop

#   # replace it with the path to master repo
#   MASTER_REPO: https://github.com/akhilesh-kabade-infoblox/automerge-test.git
  
#   # replace "master" with your master branch name
#   MASTER_BRANCH: main

# jobs:
#   merge:
#     runs-on: ubuntu-latest

#     steps:
#     - name: Merge with master
#       run: |
#         git clone ${{env.MY_REPO}} -b ${{env.MY_BRANCH}} tmp
#         cd tmp
#         git config user.name "akhilesh-kabade-infoblox"
#         git config user.email "aa2@infoblox.com"
#         git config pull.rebase false
#         git pull ${{env.MASTER_REPO}} ${{env.MASTER_BRANCH}}
#         git push
      

name: Merge feature-develop into main and Notify Authors

on:
  push:
  pull_request:
    branches:
      - feature-develop

permissions:
  contents: write
  pull-requests: write
  repository-projects: write

jobs:
  merge-and-notify:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Merge feature-develop into main
        run: |
          git config user.name "GitHub Actions"
          git config user.email "<actions@github.com>"
          git fetch origin
          git checkout main
          if git merge feature-develop --no-ff --no-edit --allow-unrelated-histories; then
            git push origin main
          else
            # Notify the author of the merge conflict and provide instructions
            commit_author=$(git --no-pager show -s --format='%an' HEAD)
            commit_author_email=$(git --no-pager show -s --format='%ae' HEAD)
            echo "Merge conflict detected in the branch 'feature-develop'. Please resolve the conflict and rebase if necessary. Instructions: [Link to conflict resolution guide]. /cc @$commit_author" >> conflict_message.txt
            echo "CONFLICT_DETECTED=true" >> env.properties
            echo "CONFLICT_MESSAGE=$(cat conflict_message.txt)" >> env.properties
            echo "CONFLICT_AUTHOR=$commit_author" >> env.properties
          fi


      # - name: Create Pull Request
      #   uses: actions/github-script@v6
      #   with:
      #       script: |
      #           const { repo, owner } = context.repo;
      #           const result = await github.rest.pulls.create({
      #             title: 'Master Sync : Auto Generated PR',
      #             owner,
      #             repo,
      #             head: '${{ github.ref_name }}',
      #             base: 'main',
      #             body: [
      #               'This PR is auto-generated by',
      #               '[actions/github-script](https://github.com/actions/github-script).'
      #             ].join('\n')
      #           });
      #           github.rest.issues.addLabels({
      #             owner,
      #             repo,
      #             issue_number: result.data.number,
      #             labels: ['feature', 'automated pr']
      #           }); 
                
      - name: Set environment variables
        if: steps.merge-and-notify.outputs.CONFLICT_DETECTED == 'true'
        run: echo "CONFLICT_DETECTED=true" >> $GITHUB_ENV

  create_pr:
    needs: merge-and-notify
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Display Conflict Message
        if: env.CONFLICT_DETECTED == 'true'
        run: |
          echo "Conflict Detected by: ${{ env.CONFLICT_AUTHOR }}"
          echo "Message: ${{ env.CONFLICT_MESSAGE }}"
          # Additional steps to handle conflict resolution, if needed

      - name: Create PR
        if: env.CONFLICT_DETECTED == 'true'
        uses: peter-evans/create-pull-request@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "Automated Weekly PR - Conflict Resolution"
          body: "This PR was automatically generated to resolve a conflict in the 'merge-test' branch."
          branch: feature-develop
          base: main
